# -*- coding: utf-8 -*-
"""Test_game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mS_hCr2bc8lkTdmQoOniqdEmsVF3Aw3O
"""

import random
import json
import math
import numpy as np
from actions import actions_dict
from armors import armors_dict
from weapons import weapons_dict
from classes import classes_dict
from techniques import techniques_dict
from features import features_dict
from statuses import statuses_dict
from positions import positions_dict
from damage_types import damage_types_dict


null = None

"""# Characters"""

class PC:
    def __init__(self, Name, Combat_Class, Race, Eye_Color, Skin_Tone, Hair_Color, Size, Weight, Trademarks, STR, DEX, CON, INT, WIS, CHA, Muscle, Wrestle, Brawl, Jump, Coordination, Finesse, Sleight, Stealth, Endurance, Concentration, Vitality, Academic, Arcana, Culture, Search, Nature, Insight, Interaction, Medicine, Perception, Survival, Aggressive, Suave, Diplomatic, Sincere, Prime, Wounded, Bloodied, Offensive_Ability, Defensive_Ability, Movement_Ability, Special_Ability, Main_Hand, Off_Hand, Utility, Armor, Combat_Special_Move, Gold, Rations, Kits, Adventuring_Special_Moves, Value_Self, Value_Others, Value_Society, Mission, Interests, Talents, Quirks, Fears, Family, Friends, Professional, Nemesis, Factions, Home, Profession, Skill, Race_Bonus, Story, Roleplaying_Special_Moves, *Inventory): 
        # Basic information and appearance
        self.Name = Name
        self.Combat_Class = Combat_Class
        self.Race = Race
        self.Eye_Color = Eye_Color
        self.Skin_Tone = Skin_Tone
        self.Hair_Color = Hair_Color
        self.Size = Size
        self.Weight = Weight
        self.Trademarks = Trademarks

                # STATS and SKILLS
        self.Attributes_Base = {
            "STR": STR,
            "DEX": DEX,
            "CON": CON,
            "INT": INT,
            "WIS": WIS,
            "CHA": CHA
        }

        self.Attributes = {
            "STR": STR,
            "DEX": DEX,
            "CON": CON,
            "INT": INT,
            "WIS": WIS,
            "CHA": CHA
        }


        self.Skills_Base = {
            "Muscle": Muscle,
            "Wrestle": Wrestle,
            "Brawl": Brawl,
            "Jump": Jump,
            "Coordination": Coordination,
            "Finesse": Finesse,
            "Sleight": Sleight,
            "Stealth": Stealth,
            "Endurance": Endurance,
            "Concentration": Concentration,
            "Vitality": Vitality,
            "Academic": Academic,
            "Arcana": Arcana,
            "Culture":  Culture,
            "Search": Search,
            "Nature": Nature,
            "Insight": Insight,
            "Interaction": Interaction,
            "Medicine": Medicine,
            "Perception": Perception,
            "Survival": Survival,
            "Aggressive": Aggressive,
            "Suave": Suave,
            "Diplomatic": Diplomatic,
            "Sincere": Sincere
        }

        self.Skills = {
            "Muscle": Muscle,
            "Wrestle": Wrestle,
            "Brawl": Brawl,
            "Jump": Jump,
            "Coordination": Coordination,
            "Finesse": Finesse,
            "Sleight": Sleight,
            "Stealth": Stealth,
            "Endurance": Endurance,
            "Concentration": Concentration,
            "Vitality": Vitality,
            "Academic": Academic,
            "Arcana": Arcana,
            "Culture":  Culture,
            "Search": Search,
            "Nature": Nature,
            "Insight": Insight,
            "Interaction": Interaction,
            "Medicine": Medicine,
            "Perception": Perception,
            "Survival": Survival,
            "Aggressive": Aggressive,
            "Suave": Suave,
            "Diplomatic": Diplomatic,
            "Sincere": Sincere
        }
        
        #Health information

        self.Prime = Prime
        self.Wounded = Wounded
        self.Bloodied = Bloodied
        self.Max_HP = Prime + Wounded + Bloodied

        #base ap... should never change in battle
        self.Base_AP = 6
        self.Base_RP = 6
        self.Base_MP = 6

        #Max ap... is what is restored at the top of each turn and can change through out the battle
        self.Max_AP = 6
        self.Max_RP = 6
        self.Max_MP = 6
        self.Death_Saves = 0
        self.Death_Fails = 0

        self.Totals = {
            "Total":Prime + Wounded + Bloodied,
            "Prime":Prime, 
            "Wounded":Wounded, 
            "Bloodied":Bloodied
        }
        self.Stamina = "Prime"
        
        self.HP = {
            "Total":Prime + Wounded + Bloodied,
            "Prime":Prime, 
            "Wounded":Wounded, 
            "Bloodied":Bloodied
        }
        self.AP = 6
        self.RP = 6
        self.MP = 6

        
        #Statuses - always start at 0 and can be added during combat
        self.Statuses = {
            "Bleeding":0,
            "Blinded":0,
            "Crippled":0,
            "Deafened":0,
            "Fatigued":0,
            "Captivated":0,
            "Confused":0,
            "Frightened":0,
            "Stunned":0,
            "Unconscious":0,
            "Burning":0,
            "Impaled":0,
            "Momentum":0,
            "Prone":0,
            "Restrained":0,
            "Suffocating":0,
            "Surprised":0
        }

        self.Captivated_Source = {}
        self.Frightened_Source = {}


        #positions

        self.Location = {
            "x":0,
            "y":0,
            "z":0 
        }
        
        self.Positions = {
            "Cover":0,
            "Flanked":0,
            "Hidden":0,
            "High Ground":0,
            "Unbalanced":0
        }

        self.Direction = 0

        #we need to add dictionaries for every phase of the encounter both pre and post
        self.Open_Phase = {}
        self.Post_Open_Phase = {}
        self.Pre_Action = {}
        self.Post_Action = {}
        self.Pre_Reaction = {}
        self.Post_Reaction = {}
        self.Pre_Roll = {}
        self.Post_Roll = {}

        self.temp_bonus = 0
        self.misc_bonus = 0 
        self.crit_threshold = 20
        self.crit_fail_threshold = 1

        # Combat stats 
        # self.Attack_Bonus = Muscle + STR_Mod
        # self.Dodge_Bonus = Coordination + DEX_Mod
        # self.Defend_Bonus = Endurance + CON_Mod
        self.Offensive_Ability = Offensive_Ability
        self.Defensive_Ability = Defensive_Ability
        self.Movement_Ability = Movement_Ability
        self.Special_Ability = Special_Ability
        

        self.Power_Rank = 0

        #equipment
        self.Equipment = {
            "Main Hand":Main_Hand,
            "Off Hand":Off_Hand,
            "Utility":Utility,
            "Armor":Armor
        }

        self.Attack_Options = {}
        # self.Main_Hand = Main_Hand
        # self.Off_Hand = Off_Hand
        # self.Utility = Utility
        # self.Armor = Armor
        self.Combat_Special_Move = Combat_Special_Move

        # adventuring conditions - set at 0 until added to after combat or during adventuring
        self.Conditions = {
            "Bleeding":0,
            "Blinded":0,
            "Crippled":0,
            "Deafened":0,
            "Drowsy":0,
            "Fatigued":0,
            "Fractured":0,
            "Sickened":0
        }


        self.Short_Rest = 0
        self.Carry_Weight = 10
        self.Gold = Gold
        self.Rations = Rations
        self.Kits = Kits
        self.Adventuring_Special_Moves = Adventuring_Special_Moves


        self.Value_Self = Value_Self
        self.Value_Others = Value_Others
        self.Value_Society = Value_Society
        self.Mission = Mission
        self.Interests = Interests
        self.Talents = Talents
        self.Quirks = Quirks
        self.Fears = Fears
        self.Family = Family
        self.Friends = Friends
        self.Professional = Professional
        self.Nemesis = Nemesis
        self.Factions = Factions
        self.Home = Home
        self.Profession = Profession
        self.Skill = Skill
        self.Race_Bonus = Race_Bonus
        self.Story = Story
        self.Roleplaying_Special_Moves = Roleplaying_Special_Moves

        self.Inventory = Inventory

        def pack(Inventory):
          inventory_tuple = Inventory
          Backpack = []
          for i in inventory_tuple:
            Backpack.append(i)
          return Backpack
        
        self.Backpack = pack(Inventory)

#  for NPC
class NPC:
    def __init__(self, Name, Creature, Profession, Value_Self, Value_Others, Value_Society, Aggressive, Suave, Diplomatic, Sincere, Core_Desires_1, Core_Desires_2, Core_Desires_3, Secrets_1, Secrets_2, Secrets_3, Fears_1, Fears_2, Fears_3, Family, Friends, Romantic, Work, Nemesis, Factions, Possesions_1, Possesions_2, Possesions_3, Abilities_1, Abilities_2, Abilities_3):
        self.Name = Name
        self.Creature = Creature
        self.Profession = Profession
        self.Value_Self = Value_Self
        self.Value_Others = Value_Others
        self.Value_Society = Value_Society
        self.Aggressive = Aggressive
        self.Suave = Suave
        self.Diplomatic = Diplomatic
        self.Sincere = Sincere
        self.Core_Desires_1 = Core_Desires_1
        self.Core_Desires_2 = Core_Desires_2
        self.Core_Desires_3 = Core_Desires_3
        self.Secrets_1 = Secrets_1
        self.Secrets_2 = Secrets_2
        self.Secrets_3 = Secrets_3
        self.Fears_1 = Fears_1
        self.Fears_2 = Fears_2
        self.Fears_3 = Fears_3
        self.Family = Family
        self.Friends = Friends
        self.Romantic = Romantic
        self.Work = Work
        self.Nemesis = Nemesis
        self.Factions = Factions
        self.Possesions_1 = Possesions_1
        self.Possesions_2 = Possesions_2
        self.Possesions_3 = Possesions_3
        self.Abilities_1 = Abilities_1
        self.Abilities_2 = Abilities_2
        self.Abilities_3 = Abilities_3

#creatures
class Creature:
    def __init__(self, Name, Size, Shape, Weight, Anatomy, Material, Description, Attacks, Main_Hand, Off_Hand, Utility, Armor, Combat_Special_Moves, Prime, Wounded, Bloodied, Immunities, Weaknesses, Vitals_1, Vitals_2, Vitals_3, Reactions, Combat_Role, Tactics_1, Tactics_2, Tactics_3, Value, Needs, Mission, Role_Playing_Special_Moves, STR, DEX, CON, INT, WIS, CHA, Muscle, Wrestle, Brawl, Jump, Coordination, Finesse, Sleight, Stealth, Endurance, Concentration, Vitality, Academic, Arcana, Culture, Search, Nature, Insight, Interaction, Medicine, Perception, Survival, Aggressive, Suave, Diplomatic, Sincere, Adventuring_Special_Moves, Adventuring_Difficulty, Role_Playing_Difficulty, Combat_Difficulty, *Inventory):
        
        
        self.visibility = {
            "Name":False,
            "Size":False,
            "Shape":False,
            "Weight":False,
            "Anatomy":False,
            "Material":False,
            "Description":False,
            "Attacks":False,
            "Equipment":False,
            "Armor":False,
            "Combat_Special_Moves":False,
            "Max_HP":False,
            "Prime_HP":False,
            "Wounded_HP":False,
            "Bloodied_HP":False,
            "Immunities":False,
            "Weaknesses":False,
            "Vitals_1":False,
            "Vitals_2":False,
            "Vitals_3":False,
            "Reactions":False,
            "Combat_Role":False,
            "Tactics_1":False,
            "Tactics_2":False,
            "Tactics_3":False,
            "Statuses":False,
            "Values":False,
            "Needs":False,
            "Mission":False,
            "Role_Playing_Special_Moves":False,
            "Stats":False,
            "Skills":False,
            "Speed":False,
            "Adventuring_Special_Moves":False,
            "Combat_Difficulty":False,
            "Role_Playing_Difficulty":False,
            "Adventuring_Difficulty":False            
        }


        self.Hostile = False

        self.Name = Name
        self.Size = Size
        self.Shape = Shape
        self.Weight = Weight
        self.Anatomy = Anatomy
        self.Material = Material
        self.Description = Description

        #Combat = #Combat


        self.Attacks = Attacks
        self.Armor = Armor
        self.Combat_Special_Moves = Combat_Special_Moves
        self.Prime = Prime
        self.Wounded = Wounded
        self.Bloodied = Bloodied
        self.Immunities = Immunities
        self.Weaknesses = Weaknesses
        self.Vitals_1 = Vitals_1
        self.Vitals_2 = Vitals_2
        self.Vitals_3 = Vitals_3
        self.Reactions = Reactions
        self.Combat_Role = Combat_Role
        self.Tactics = {
            1:Tactics_1,
            2:Tactics_2,
            3:Tactics_3
        }


        self.Max_HP = Prime + Wounded + Bloodied
        #base ap... should never change in battle
        self.Base_AP = 6
        self.Base_RP = 6
        self.Base_MP = 6

        #Max ap... is what is restored at the top of each turn and can change through out the battle
        self.Max_AP = 6
        self.Max_RP = 6
        self.Max_MP = 6
        
        self.Stamina = "Prime"
        
        self.HP = {
            "Total":Prime + Wounded + Bloodied,
            "Prime":Prime, 
            "Wounded":Wounded, 
            "Bloodied":Bloodied
        }
        
        self.AP = 6
        self.RP = 6
        self.MP = 6

        #we need to add dictionaries for every phase of the encounter both pre and post
        self.Open_Phase = {}
        self.Post_Open_Phase = {}
        self.Pre_Action = {}
        self.Post_Action = {}
        self.Pre_Reaction = {}
        self.Post_Reaction = {}
        self.Pre_Roll = {}
        self.Post_Roll = {}

        
        self.temp_bonus = 0
        self.misc_bonus = 0
        self.crit_threshold = 20
        self.crit_fail_threshold = 1

        self.Statuses = {
            "Bleeding":0,
            "Blinded":0,
            "Crippled":0,
            "Deafened":0,
            "Fatigued":0,
            "Captivated":0,
            "Confused":0,
            "Frightened":0,
            "Stunned":0,
            "Unconscious":0,
            "Burning":0,
            "Impaled":0,
            "Momentum":0,
            "Prone":0,
            "Restrained":0,
            "Suffocating":0,
            "Surprised":0
        }

        self.Captivated_Source = {}
        self.Frightened_Source = {}

        #positions

        self.Location = {
            "x":0,
            "y":0,
            "z":0 
        }

        self.Positions = {
            "Cover":0,
            "Flanked":0,
            "Hidden":0,
            "High Ground":0,
            "Unbalanced":0
        }

        self.Direction = 0

        #Charisma = #Charisma
        self.Value = Value
        self.Needs = Needs
        self.Mission = Mission
        self.Role_Playing_Special_Moves = Role_Playing_Special_Moves

                # STATS and SKILLS

        self.Attributes_Base = {
            "STR": STR,
            "DEX": DEX,
            "CON": CON,
            "INT": INT,
            "WIS": WIS,
            "CHA": CHA
        }

        self.Attributes = {
            "STR": STR,
            "DEX": DEX,
            "CON": CON,
            "INT": INT,
            "WIS": WIS,
            "CHA": CHA
        }


        self.Skills_Base = {
            "Muscle": Muscle,
            "Wrestle": Wrestle,
            "Brawl": Brawl,
            "Jump": Jump,
            "Coordination": Coordination,
            "Finesse": Finesse,
            "Sleight": Sleight,
            "Stealth": Stealth,
            "Endurance": Endurance,
            "Concentration": Concentration,
            "Vitality": Vitality,
            "Academic": Academic,
            "Arcana": Arcana,
            "Culture":  Culture,
            "Search": Search,
            "Nature": Nature,
            "Insight": Insight,
            "Interaction": Interaction,
            "Medicine": Medicine,
            "Perception": Perception,
            "Survival": Survival,
            "Aggressive": Aggressive,
            "Suave": Suave,
            "Diplomatic": Diplomatic,
            "Sincere": Sincere
        }

        self.Skills = {
            "Muscle": Muscle,
            "Wrestle": Wrestle,
            "Brawl": Brawl,
            "Jump": Jump,
            "Coordination": Coordination,
            "Finesse": Finesse,
            "Sleight": Sleight,
            "Stealth": Stealth,
            "Endurance": Endurance,
            "Concentration": Concentration,
            "Vitality": Vitality,
            "Academic": Academic,
            "Arcana": Arcana,
            "Culture":  Culture,
            "Search": Search,
            "Nature": Nature,
            "Insight": Insight,
            "Interaction": Interaction,
            "Medicine": Medicine,
            "Perception": Perception,
            "Survival": Survival,
            "Aggressive": Aggressive,
            "Suave": Suave,
            "Diplomatic": Diplomatic,
            "Sincere": Sincere
        }


        self.Equipment = {
            "Main Hand":Main_Hand,
            "Off Hand":Off_Hand,
            "Utility":Utility,
            "Armor":armors_dict[Armor]
        }

        self.Attack_Options = {}

        self.Inventory = Inventory

        def pack(Inventory):
          inventory_tuple = Inventory
          Backpack = []
          for i in inventory_tuple:
            Backpack.append(i)
          return Backpack
        
        self.Backpack = pack(Inventory)
       
        self.Adventuring_Special_Moves = Adventuring_Special_Moves



        self.Combat_Difficulty = Combat_Difficulty
        self.Role_Playing_Difficulty = Role_Playing_Difficulty
        self.Adventuring_Difficulty = Adventuring_Difficulty


"""# Functions"""

def mods(attribute):
    mod = (attribute // 5) - 2
    return mod

#Dice Roller

def roll_dice(high,fail,crit):
  total = random.randint(1,high)
  if total <= fail:
    print("You rolled a " + str(total) + " which is a Critical Fail")
    return "Critical Fail"
  elif total >= crit:
    print("You rolled a " + str(total) + " which is a Critical!")
    return "Critical"
  else:
    print("Roll = " + str(total))
    return total


def temp_bonus(source):
  source = make_class(source)

  bonus = source.temp_bonus

  print(source.Name + ", you use your temp bonus of: " + str(bonus))
  temp_bonus = 0

  return bonus

def make_string(target):
  if type(target) == str:
    return target
  else:
    return target.Name

def make_class(target):
  if type(target) == str:
    return eval(target)
  else:
    return target

def break_stamina(target,*amount):
  target = make_class(target)
  target_name = make_string(target)

  if amount:
    amount = int(amount[0])
  else:
    amount = 1
  stamina = target.Stamina

  stamina = target.Stamina

  injuries = ["Bleeding", "Blinded", "Crippled", "Fatigued", "Confused", "Stunned"]

  injury = injuries[roll_dice(6,-1,7)] - 1

  while amount > 0:
    print("You broke your " + stamina + " stamina. Take an injury")
    target.HP[stamina] = 0
    if stamina == "Prime":
      target.Stamina = "Wounded"
      target.Statuses[injury] += 1
      print("You took a stage of: " + injury + " as an injury")
    elif stamina == "Wounded":
      target.Stamina = "Bloodied"
      target.Statuses[injury] += 2
      print("You took two stages of: " + injury + " as an injury")
    else:
      target.Stamina = "Bleeding Out"
      target.Statuses[injury] += 3
      print("You took 3 stages of: " + injury + " as an injury. \nYou lose all strength and begin " + target.Stamina + "\n Roll Death Saving throws")

    amount -= 1

def equip(source,item,slot):
  source = make_class(source)
  if slot == "Main Hand":
    source.Equipment[slot] = weapons_dict[item]

    # if len(weapons_dict[item]["Features"]) > 0:
    for i in weapons_dict[item]["Features"]:
      exec(features_dict[i]["Equip"])
      print(i)
  elif slot == "Armor":
    source.Equipment[slot] = armors_dict[item]

    # if len(armors_dict[item]["Features"]) > 0:
    for i in armors_dict[item]["Features"]:
      exec(armors_dict[i]["Equip"])
      print(i)

def equip_all(source):
  source = make_class(source)

  for slot in source.Equipment:
    if source.Equipment[slot] != '':
      equip(source,source.Equipment[slot],slot)

def unequip(source,slot):
  source = make_class(source)
  item = source.Equipment[slot]["Name"]
  if slot == "Main Hand":
    # if len(weapons_dict[item]["Features"]) > 0:
    for i in weapons_dict[item]["Features"]:
      exec(features_dict[i]["Unequip"])
      print(i)
  elif slot == "Armor":
    source.Equipment[slot] = armors_dict[item]

    # if len(armors_dict[item]["Features"]) > 0:
    for i in weapons_dict[item]["Features"]:
      exec(features_dict[i]["Unequip"])
      print(i)
  
  source.Equipment[slot] = None

def damage(target,*amount):
  target = make_class(target)
  target_name = make_string(target)
  armor = target.Equipment["Armor"]
  if amount:
    amount = int(amount[0])
  else:
    amount = 1
  stamina = target.Stamina

  print(target_name + ", you have " + str(target.HP["Total"]) + " HP and you took " + str(amount) + " damage")
  while amount > 0:
    print(target_name + " HP breakdown:\n Total HP = " + str(target.HP["Total"]) + "\nPrime HP = " + str(target.HP["Prime"]) + "\nWounded HP = " + str(target.HP["Wounded"]) + "\nBloodied HP = " + str(target.HP["Bloodied"]))
    
    if target.HP[stamina] == 0:
      break_stamina(target)
      if target.Stamina == "Bleeding Out":
        if type(target) == Creature:
          target.Hostile = False
          print(target_name + ", you are Dead")
        else:
          target.Death_Fails += 1
          print(target_name + ", you took damage while bleeding out resulting in a failed death saving throw")
        break
    
    stamina = target.Stamina
    target.HP[stamina] -= 1
    target.HP["Total"] -= 1
    target.Equipment["Armor"][armor]["Durability"] -= 1
    amount -= 1
          
    print("You now have " + str(target.HP["Total"]) + " HP")

def drain(target,attribute,amount):
  target = make_class(target)

  while amount > 0:
    if target.Attributes[attribute] == 0:
      status(target,'Unconscious',1)
    target.Attributes[attribute] -= 1
    
    amount -= 1

def distance(source,target):
  source = make_class(source)
  target = make_class(target)

  source_location = source.Location
  target_location = target.Location 

  x_distance = abs(source_location['x'] - target_location['x'])
  y_distance = abs(source_location['y'] - target_location['y'])
  z_distance = abs(source_location['z'] - target_location['z'])

  distance = [x_distance,y_distance,z_distance]

  distance.sort()
  return distance[-1]

def convert_direction(direction):
    if direction == 0:
      return "North"
    elif direction == 1:
      return 'North East'
    elif direction == 2:
      return 'East'
    elif direction == 3:
      return 'South East'
    elif direction == 4:
      return 'South'
    elif direction == 5:
      return 'South West'
    elif direction == 6:
      return 'West'
    else:
      return 'North West'

def melee_coordinates(target):
  target = make_class(target)

  target_coordinates = target.Location
  attack_coordinates = target_coordinates
  if target.Direction == 0:
    attack_coordinates['y'] += 1
  elif target.Direction == 1:
    attack_coordinates['x'] += 1
    attack_coordinates['y'] += 1
  elif target.Direction == 2:
    attack_coordinates['x'] += 1
  elif target.Direction == 3:
    attack_coordinates['x'] += 1
    attack_coordinates['y'] -= 1
  elif target.Direction == 4:
    attack_coordinates['y'] -= 1
  elif target.Direction == 5:
    attack_coordinates['x'] -= 1
    attack_coordinates['y'] -= 1
  elif target.Direction == 6:
    attack_coordinates['x'] -= 1
  else:
    attack_coordinates['x'] -= 1
    attack_coordinates['y'] += 1

  return attack_coordinates

# I need to add a second impact once I add materials
def force_move(target,amount,direction):
  print(target.Name + ", you are moved " + str(amount) + " in the " + convert_direction(direction) + " direction.\nYour starting coordinates are ")
  print(target.Location)
  while amount > 0:
    if direction == 0:
      target.Location['y'] += 1
    elif direction == 1:
      target.Location['x'] += 1
      target.Location['y'] += 1
    elif direction == 2:
      target.Location['x'] += 1
    elif direction == 3:
      target.Location['x'] += 1
      target.Location['y'] -= 1
    elif direction == 4:
      target.Location['y'] -= 1
    elif direction == 5:
      target.Location['x'] -= 1
      target.Location['y'] -= 1
    elif direction == 6:
      target.Location['x'] -= 1
    else:
      target.Location['x'] -= 1
      target.Location['y'] += 1
    amount -= 1

  print("Your ending coordinates are: ")
  print(target.Location)

def impact(source,target,source_dtype,target_dtype,collision):
  def impact_result(target,amount,direction,dtype):
    capacity = amount // 2
    if dtype == 'Bludgeoning':
      if capacity > 0:
        damage(target,capacity)
        status(target,'Prone',capacity)
      print(target.Name + ", the impact pushes you " + str(amount) + " yards away in the " + convert_direction(direction) + "\nYou take" + str(capacity) + " damage and\n" + str(capacity) + " stages of prone")
      force_move(target,amount,direction)
    elif dtype == 'Piercing':
      print(target.Name + ", the impact impales you " + str(capacity) + " stages")
      status(target,'Impaled',capacity)
    else:
      print(target.Name + ", the impact gives you " + str(capacity) + " stages of bleeding")
      status(target,'Impaled',capacity)




  source = make_class(source)
  target = make_class(target)

  source_momentum = source.Statuses['Momentum']
  target_momentum = target.Statuses['Momentum']

  
  angle = abs(source.Direction - target.Direction)
  if angle == 4:   
    source_force = source.Weight * (1 + source_momentum)
    target_force = target.Weight * (1 + target_momentum)

  elif angle == 0:
    source_momentum = source_momentum - target_momentum
    if source_momentum < 0:
      source_momentum = 0

    source_force = source.Weight * (1 + source_momentum)
    target_force = target.Weight
  
  else:
    source_force = source.Weight * (1 + source_momentum)
    target_force = target.Weight

  print(source.Name + ", your total force units are: \n" + str(source_force))
  print(target.Name + ", your total force units are: \n" + str(target_force))

  if collision == True:
    if source_force > target_force:
      amount = source_force - target_force
      impact_result(target,amount,target.Direction,target_dtype)
    elif target_force > source_force:
      amount = source_force - target_force
      impact_result(source,amount,source.Direction,source_dtype)
    else:
      amount = source_force
      impact_result(target,amount,target.Direction,target_dtype)
      impact_result(source,amount,source.Direction,source_dtype)
  else:
    if source_force > target_force:
      amount = source_force - target_force
      impact_result(target,amount,target.Direction,target_dtype)
    else:
      print("The attack didn't have enough force for an impact")

# Contest function

#Player starts turn, 
# prompt player with action
# player selects action 
# prompt player with description and get confirmation
# if the player doesn't confirm, prompt again
# player selects target, rolls and adds modifiers, the target then selects a reaction (unless predefined in action) and rolls + modifiers. (prompt GM for approval) If Player > target, apply payload, else no effect. Deduct AP
# else if the action is a scale - roll and add modifiers, then prompt GM for approval, then apply the effect based on the range. Deduct AP
# else if the action is a DC, roll and add modifiers, then prompt GM for approval, if yes, apply effect. Deduct AP

def contest(source,action,target):
  source = make_class(source)
  source_name = make_string(source)

  source_stat = mods(source.Attributes[str(actions_dict[action]["Stat"])])
  source_skill = source.Skills[actions_dict[action]["Skill"]]
  source_mod = source.misc_bonus
  source_crit = source.crit_threshold
  source_crit_fail = source.crit_fail_threshold

  target = make_class(target)
  target_name = make_string(target)  
  target_crit = target.crit_threshold
  target_crit_fail = target.crit_fail_threshold

  # add Pre_Roll effects if any
  if len(source.Pre_Roll) > 0:
    interrupt(source, "Pre_Roll") 

  source_dice = roll_dice(20,source_crit_fail,source_crit)
  
  # add Post_Roll effects if any
  if len(source.Post_Roll) > 0:
    interrupt(source, "Post_Roll")

    

    #roll source actions
  if source_dice == "Critical" or "Critical Fail":
    source_roll = source_dice
  else:
    source_roll = source_dice + source_stat + source_skill + source_mod
  print("After all bonuses, your total is " + str(source_roll))

  source_mod = 0

  reaction = actions_dict[action]["Reaction"]
  print(target_name + ", Roll a " + reaction + " check as a reaction.")

  if reaction == "Muscle" or "Wrestle" or "Brawl" or "Jump":
    reaction_stat = "STR"
  elif reaction == "Coordination" or "Finesse" or "Sleight" or "Stealth":
    reaction_stat = "DEX"
  elif reaction == "Endurance" or "Concentration" or "Vitality":
    reaction_stat == "CON"
  elif reaction == "Academic" or "Arcana" or "Culture" or "Investigation" or "Nature":
    reaction_stat = "INT"
  elif reaction == "Insight" or "Interaction" or "Medicine" or "Perception" or "Survival":
    reaction_stat = "WIS"
  elif reaction == "Aggressive" or "Suave" or "Diplomatic" or "Sincere":
    reaction_stat = "CHA"
  else:
    reaction_stat = input("What is the stat for your reaction: STR; DEX; CON; INT; WIS; CHA")
  
  target_stat = mods(target.Attributes[reaction_stat])
  target_skill = target.Skills[reaction]
  target_dice = roll_dice(20,target_crit_fail,target_crit)

  if target_dice == "Critical" or "Critical Fail":
    target_roll = target_dice
  else:
    target_roll = target_dice + target_stat + target_skill + eval(target + ".misc_bonus")
  print(target_name + "'s " + reaction + " is total is " + str(target_roll))
  
  if source_roll == target_roll:
    print("You both tied and cancel each other out")
    result = "Tie"
  elif source_roll == "Critical":
    print("You rolled a critical success!")
    result = "Critical"
  elif source_roll == "Critical Fail":
    print("You rolled a critical fail")
    result = "Critical Fail"
  elif target_roll == "Critical":
    print("Your target rolled a critical success, you fail")
    result = "Critical Fail"
  elif target_roll == "Critical Fail":
    print("Your target rolled a critical fail, you succeed")
    result = "Critical"
  elif source_roll > target_roll:
    print("You succeed!")
    result = "Success"
  else:
    result = "Fail"
    print("Sorry, you failed")
  return result

# Special action function for actions that trigger a target's choice of standard reactions

#Player starts turn, 
# prompt player with action
# player selects action 
# prompt player with description and get confirmation
# if the player doesn't confirm, prompt again
# if the action is a contest, player selects target, rolls and adds modifiers, the target then selects a reaction (unless predefined in action) and rolls + modifiers. (prompt GM for approval) If Player > target, apply payload, else no effect. Deduct AP
# else if the action is a scale - roll and add modifiers, then prompt GM for approval, then apply the effect based on the range. Deduct AP
# else if the action is a DC, roll and add modifiers, then prompt GM for approval, if yes, apply effect. Deduct AP

def attack(source,action,target,reaction):

  #set up sourse variables

  source = make_class(source)
  source_name = make_string(source)

  source_stat = mods(source.Attributes[str(actions_dict[action]["Stat"])])
  source_skill = source.Skills[str(actions_dict[action]["Skill"])]
  source_mod = source.misc_bonus 
  source_crit = source.crit_threshold
  source_crit_fail = source.crit_fail_threshold

  source_weapon = source.Equipment["Main Hand"]
  


  #set up target Variables
  
  target = make_class(target)
  target_name = make_string(target)  
  target_crit = target.crit_threshold
  target_crit_fail = target.crit_fail_threshold
  target_armor = target.Equipment["Armor"]


  # add Pre_Roll effects if any
  if len(source.Pre_Roll) > 0:
    interrupt(source, "Pre_Roll") 

  source_dice = roll_dice(20,source_crit_fail,source_crit)
  
  # add Post_Roll effects if any
  if len(source.Post_Roll) > 0:
    interrupt(source, "Post_Roll")


    #roll source actions
  if type(source_dice) == str:
    source_roll = source_dice
  else:
    source_roll = source_dice + source_stat + source_skill + source_mod + temp_bonus(source)
  print("After all bonuses, your total is " + str(source_roll))

  source_mod = 0

  #get target reaction
  print(target_name + " chose to react with " + reaction)


  print(target_name + ", Roll a " + reaction + " check as a reaction.")

  # Roll reaction for target 
  target_stat = mods(target.Attributes[actions_dict[reaction]["Stat"]])
  target_skill = target.Skills[actions_dict[reaction]["Skill"]]

  if actions_dict[reaction]["Dice_Roll"] == "d6":
    target_dice = roll_dice(6,0,target_crit)
    if reaction == "Block":
      target_roll = target_dice + armors_dict[target_armor]["Defend"] + math.floor(armors_dict[target_armor]["Block_Bonus"] * (target_stat + target_skill))
      print("The targets' " + reaction + " roll is " + str(target_dice) + " dice roll + " + str(armors_dict[target_armor]["Defend"]) + " armor base + (" + str(math.floor(armors_dict[target_armor]["Block_Bonus"])) + " modifier of " + str(target_stat + target_skill) + " skill bonus) \nfor a total of \n" + str(target_roll))
    else:
      target_roll = target_dice + armors_dict[target_armor]["Agility"] + math.floor(armors_dict[target_armor]["Dodge_Bonus"] * (target_stat + target_skill))
      print("The targets' " + reaction + " roll is " + str(target_dice) + " dice roll + " + str(armors_dict[target_armor]["Agility"]) + " armor base + (" + str(armors_dict[target_armor]["Dodge_Bonus"]) + " modifier of " + str(target_stat + target_skill) + " skill bonus) \nfor a total of \n" + str(target_roll))
  else:
    target_dice = roll_dice(20,target_crit_fail,target_crit)
    if type(target_dice) == str:
      target_roll = target_dice
    else:
      target_roll = target_dice + target_stat + target_skill
    print("The targets' " + reaction + " is total is " + str(target_roll))



  if source_roll == target_roll:
    print("You both tied and cancel each other out")
  elif source_roll == "Critical":
    print("You rolled a critical success!")
    result = "Critical"
  elif source_roll == "Critical Fail":
    print("You rolled a critical fail")
    result = "Critical Fail"
  elif target_roll == "Critical":
    print("Your target rolled a critical success, you fail")
    result = "Critical Fail"
  elif target_roll == "Critical Fail":
    print("Your target rolled a critical fail, you succeed")
    result = "Critical"
  elif source_roll > target_roll:
    print("You succeed!")
    result = "Success"
  else:
    result = "Fail"
    print("Sorry, you failed")
  return result

def range_action(source,action):

  source = make_class(source)
  source_name = make_string(source)

  source_stat = mods(source.Attributes[str(actions_dict[action]["Stat"])])
  source_skill = source.Skill[str(actions_dict[action]["Skill"])]
  source_mod = source.misc_bonus
  source_crit = source.crit_threshold
  source_crit_fail = source.crit_fail_threshold
  

  # add Pre_Roll effects if any
  if len(source.Pre_Roll) > 0:
    interrupt(source, "Pre_Roll") 

  source_dice = roll_dice(20,source_crit_fail,source_crit)
  
  # add Post_Roll effects if any
  if len(source.Post_Roll) > 0:
    interrupt(source, "Post_Roll")


    #roll source actions
  if type(source_dice) == str:
    source_roll = source_dice
  else:
    source_roll = source_dice + source_stat + source_skill + source_mod
  print("After all bonuses, your total is " + str(source_roll))

  source_mod = 0

  return source_roll

def dc_action(source,action):
  source = make_class(source)
  source_name = make_string(source)

  source_stat = mods(source.Attributes[str(actions_dict[action]["Stat"])])
  source_skill = source.Skill[str(actions_dict[action]["Skill"])]
  source_mod = source.misc_bonus
  source_crit = source.crit_threshold
  source_crit_fail = source.crit_fail_threshold

  # add Pre_Roll effects if any
  if len(source.Pre_Roll) > 0:
    interrupt(source, "Pre_Roll")

  source_dice = roll_dice(20,source_crit_fail,source_crit)
  
  # add Post_Roll effects if any
  if len(source.Post_Roll) > 0:
    interrupt(source, "Post_Roll")


    #roll source actions
  if type(source_dice) == str:
    source_roll = source_dice
  else:
    source_roll = source_dice + source_stat + source_skill + source_mod
  print("After all bonuses, your total is " + str(source_roll))

  source_mod = 0


  if source_roll == "Critical":
    print("You rolled a critical success!")
    result = "Critical"
  elif source_roll == "Critical Fail":
    print("You rolled a critical fail")
    result = "Critical Fail"
  else:
    result = input("GM, the player rolled a " + str(source_roll) + "\nIs that a Success or a Fail?")

  return result

# move action

def move(source):
  #get source
  source = make_class(source)
  source_name = make_string(source)

  # get source location
  start_location = source.Location
  current_location = start_location

  print("Your starting location is: \n" + str(current_location))

  accepted = False

  while accepted == False:
    #get each aspect of the destination location
    print("Where do you want to go?")
    x = input("What is the x coordinate?")
    y = input("What is the y coordinate?")
    z = input("What is the z coordinate?")
    destination = {
        "x":int(x),
        "y":int(y),
        "z":int(z)
        }

    #get the length of each coordinate change
    len_x = abs(current_location["x"] - destination['x'])
    len_y = abs(current_location["y"] - destination['y'])
    len_z = abs(current_location['z'] - destination['z'])
    

    # get the distance to the objective 
    if len_x >= len_y:
      distance = len_x
    else:
      distance = len_y

    # if the distance is greater than the source resources restart the loop
    if distance > source.MP:
      if distance <= source.AP + source.MP:
        confirm = input(source_name + ", the distance is greater than your existing MP and you will have to spend AP to travel the rest of the way. Do you still want to travel here")
        if confirm == "yes":
          print("Perfect, your destination is " + str(distance) + " yards away")
          accepted = True
        else:
          print("Please select another location")
          accepted = False
      else:
        print(source_name + ", sorry, your destination is beyond your remaining. Please select another destination")
        accepted = False
    else:
      print("Perfect, your destination is " + str(distance) + " yards away")
      accepted = True
    

  # now outside the loop, create another loop for each yard you move. It should do the following: find the shortest path between two points, determine look direction. 
  while distance > 0:
    len_x = abs(current_location["x"] - destination['x'])
    len_y = abs(current_location["y"] - destination['y'])
    len_z = abs(current_location['z'] - destination['z'])
    if len_x > len_y:
      #moving left/West
      if current_location['x'] > destination['x']:
        source.Look_Direction = 6
        current_location['x'] -= 1
        source.Location = current_location
        print("You move 1 yard West")
      #moving righ/East
      else:
        source.Look_Direction = 2
        current_location['x'] += 1
        source.Location = current_location
        print("You move 1 yard East")

    elif len_x < len_y:
      #moving down/South
      if current_location['y'] > destination['y']:
        source.Look_Direction = 4
        current_location['y'] -= 1
        source.Location = current_location
        print("You move 1 yard South")
      #moving up/North
      else:
        source.Look_Direction = 0
        current_location['y'] += 1
        source.Location = current_location
        print("You move 1 yard North")

    else:
      #moving up+right/North East
      if current_location['y'] < destination['y'] and current_location['x'] < destination['x']:
        source.Look_Direction = 1
        current_location['x'] += 1
        current_location['y'] += 1
        source.Location = current_location
        print("You move 1 yard North East")

      #moving down+right/South East
      elif current_location['y'] > destination['y'] and current_location['x'] < destination['x']:
        source.Look_Direction = 3
        current_location['x'] += 1
        current_location['y'] -= 1
        source.Location = current_location
        print("You move 1 yard South East")

      #moving down+left/South West
      elif current_location['y'] > destination['y'] and current_location['x'] > destination['x']:
        source.Look_Direction = 5
        current_location['x'] -= 1
        current_location['y'] -= 1
        source.Location = current_location
        print("You move 1 yard South West")

      #moving up+left/North West
      else:
        source.Look_Direction = 7
        current_location['x'] -= 1
        current_location['y'] += 1
        source.Location = current_location
        print("You move 1 yard North West")
      
    distance -= 1

  print("Your final coordinates are:\n" + str(source.Location))

def weapon_attack(source):

  source = make_class(source)
  weapon = source.Equipment["Main Hand"]

  damage_type = weapons_dict[weapon]["Type"]

  print("What base effect do you want to do?")
  for i in damage_types_dict[damage_type]:
    print(i)

  base_effect = input("Select your Base effect?")

  if len(weapons_dict[weapon]["Techniques"]) > 1:
    print("Here are your available techniques")
    for i in weapons_dict[weapon]["Techniques"]:
      print(i)
    if "Heavy" in weapons_dict[weapon]["Features"]:
      technique1 = input("What is the first technique you want to use?")
      level1 = weapons_dict[weapon]["Techniques"][technique1]
      technique2 = input("What is the second technique you want to use?")
      level2 = weapons_dict[weapon]["Techniques"][technique2]
      technique = {technique1:level1,technique2:level2}
    else:
      technique = input("Which technique do you want to do?")
      level = weapons_dict[weapon]["Techniques"][technique]
  else:
    for k,v in weapons_dict[weapon]["Techniques"]:
      technique = k
      level = v
      technique = {technique:level}

  if "Distance" in technique:
    level = technique["Distance"]
    exec(techniques_dict["Distance"][level]["Payload"])
  elif "Pin Point" in technique:
    level = technique["Pin Point"]
    exec(techniques_dict["Pin Point"][level]["Payload"])



  options = {
      "Weapon":weapon,
      "Base": base_effect,
      "Technique": technique,
  }
  source.Attack_Options = options

def action_cost(source,action):
  source = make_class(source)

  if actions_dict[action]["Speed"] == "~":
    weapon = source.Equipment["Main Hand"]
    action_cost = weapons_dict[weapon]["AP"]
  else:
    action_cost = actions_dict[action]["Speed"]
  return action_cost

def stamina(source):
  source_stamina = source.Stamina
  source.HP[source_stamina] = eval(str(source.Name) + "." + str(source_stamina))
  source_AP = source.Max_AP
  source_RP = source.Max_RP
  source_MP = source.Max_MP
  print(str(source.Name) + ":\nCurrent HP = " + str(source.HP["Prime"] + source.HP["Wounded"] + source.HP["Bloodied"]) + "\nCurrent Stamina = " + source_stamina + "\nAP = " + str(source_AP) + "\nRP = " + str(source_RP) + "\nMP = " + str(source_MP))

# effect function

def effect(source,target,action,result):
  source = make_class(source)
  source_name = make_string(source)
  target = make_class(target)
  target_name = make_string(target)
  
  
  if result == "Fail":
    print("Sorry you Suck")
  elif result == 'Critical Fail':
    print("You really suck bad")
  elif result == "Critical":
    if actions_dict[action]["Action_Type"] == "Range":
      result = 30
      exec(actions_dict[action]["Payload"])
    elif action == "Weapon Attack":
      amount = 0
      options = source.Attack_Options
      amount == weapons_dict[options["Weapon"]]["Crit Damage"]
    else:
      exec(actions_dict[action]["Payload"])
      exec(actions_dict[action]["Payload"])
  else:
    amount = 1
    exec(actions_dict[action]["Payload"])



def status(target,status,stage,*source):
  target = make_class(target)
  target_name = make_string(target)
  current_stage = target.Statuses[status]

  
  if source:
    sources = []
    for item in source:
      sources.append(item)

    source = str(sources[0])
    source = make_class(source)
    source_name = make_string(source)
    print(source)
    print(source_name)
    

  print(target_name + ", your " + status + " status is currently at stage: " + str(current_stage) + "\n It is now being adjusted by " + str(stage))
  if stage > 0:
    while stage > 0:
      if current_stage == 4:
        # change this to vital attack?
        print(target_name + ", your " + status + " is maxed and is a permanent injury. You can't take any more stages and instead, you take a vital 1 attack")
        break_stamina(target)
      elif current_stage == 3:          
        if statuses_dict[status]["Type"] == "Physical":   
          print(target_name + ", your " + status + " was already at stage 3. This status now becomes a permanent injury")
          target.Statuses[status] += 1
          exec(statuses_dict[status]["Payload"][target.Statuses[status]])
        else:
          print(target_name + ", your " + status + " is maxed and you can't take any more stages.")
      else:
        target.Statuses[status] += 1
        exec(statuses_dict[status]["Payload"][target.Statuses[status]])

      stage -= 1
  else:
    while stage < 0:
      if current_stage == 4:
        print(target_name + ", your " + status + " is maxed and is a permanent injury. You can't heal any stages without magical assitance or rest")
      elif statuses_dict[status]["Type"] == "Physical" and current_stage == 1:
        print(target_name + ", your " + status + " is a physical status. You can't heal past stage 1 without magical assitance or rest")
      else:
        target.Statuses[status] -= 1
        exec(statuses_dict[status]["Payload"][target.Statuses[status]])
      
      stage += 1

def open_phase(target):
  target = make_class(target)
  target_name = make_string(target)

  for k,v in target.Open_Phase.items():
    print(k)
    exec(v)

def interrupt(target,phase):
  target = make_class(target)
  target_name = make_string(target)
  phase = eval(target_name + "." + phase)

  for k,v in phase.items():
    print(k)
    exec(v)

def turn(player):
  # source = eval(str(player))
  source = make_class(player)
  source_name = make_string(player)

  print(source_name + ", Its your turn!\n\nYour stamina kicks in and regenerates your HP, AP, RP, and MP")
  stamina(source)

  open_phase(source)
  
  #add Post_Open_Phase effects if any
  if len(source.Post_Open_Phase) > 0:
    interrupt(source,"Post_Open_Phase")
  
  source_AP = source.AP
  source_MP = source.MP

  while source_AP > 0:
    action = input("What would you like to do?")
    
    if action == "Weapon Attack":
      action_AP = weapons_dict[source.Equipment['Main Hand']]["AP"]
    else:
      action_AP = actions_dict[action]["Speed"]
    print(actions_dict[action]["Description"])
    if int(action_AP) > source_AP:
      action = input("Sorry, you don't have enough AP for that action\nWhat else would you like to do")

    

    print("You have " + str(source_AP) + " left and the " + action + " action costs " + str(action_AP) + " AP")
    confirmation = input("Do you wish to proceed?")

    if confirmation == "yes":
      # add Pre_Action effects if any 
      if action == "Weapon Attack":
        weapon_attack(source)
        if len(source.Pre_Action) > 0:
          interrupt(source,"Pre_Action")
      else:
        if len(source.Pre_Action) > 0:
            interrupt(source,"Pre_Action")

        if actions_dict[action]["Action_Type"] == "Attack":
          target_name = input("Who would you like to target?")
          target = make_class(target_name)  
          reaction = input(target_name + ", " + source_name + " is targeting you with a " + action + " action. How do you react?")
          if len(target.Pre_Reaction) > 0:
            interrupt(target, "Pre_Reaction")
          result = attack(source, action, target, reaction)
          if len(target.Post_Reaction) > 0:
            interrupt(target, "Post_Reaction")
        elif actions_dict[action]["Action_Type"] == "Range":
          target = source
          result = range_action(source, action)
        elif actions_dict[action]["Action_Type"] == "Contest":
          target = input("Who would you like to target?")
          result = contest(source, action, target)
        elif actions_dict[action]["Action_Type"] == "DC":
          target = input("Who would you like to target?")
          result = dc_action(source,action)

      source_AP -= int(action_cost(source, action))
  
    else:
        print("I'll cancel that for you!")

    print("The result of you " + action + " action is " + str(result))
    
    effect(source,target,action,result)

    # add Post_Action effects if any
    if len(source.Post_Action) > 0:
      interrupt(source,"Post_Action")

    print("You still have " + str(source_AP) + " AP left.")


  print("You are out of AP and your turn is done\n\n")

def round_mechanics(*initiative_list):
  print("Round Mechanics aren't done yet")

def combat_round(initiative):
  round_mechanics()
  hostile = True
  turn_count = 1
  while hostile == True:
    print("\n\nIt is the top of round " + str(turn_count) + ".\n" + initiative[0] + ", you are up first!\n\n")
    for combatant in initiative:
      print("Its your turn " + combatant)
      turn(combatant)
    turn_count += 1

def combat_encounter(*combatants):
  initiative = []
  initiative_order = []
  for i in combatants:
    combat_order = {
        "name": i.Name,
        "initiative":roll_dice(20,0,21)
        }
    initiative.append(combat_order)

  print(initiative)

  initiative_list = sorted(initiative, key=lambda x: x['initiative'], reverse=True)

  for i in initiative_list:
    print(i["name"], i["initiative"])
    initiative_order.append(i["name"])
    
  for i in initiative_order:
    print(i)

  hostile = True
  while hostile == True:
    combat_round(initiative_order)
  print("You all hostiles have been subdued or eliminated")

